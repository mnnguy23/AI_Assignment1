#include "CrossOver.h"

std::vector<int> CrossOver::crossoverSelection(std::vector< std::vector<int> > population, int crossOverRate)
{
	
	int rate = (20 - (20 - 2*crossOverRate ));
	
	for(int i = 0; i < 20; i++)
	{ 
		shuffler.push_back(i); 
	}
	
	std::random_shuffle(shuffler.begin(), shuffler.end());
	
	for(int i = 0; i < (20 - rate); i++)
	{
		remainingPopulation.push_back(shuffler.front());
		shuffler.erase(shuffler.begin()); 
	}
  CrossOver::geneCount(population, shuffler);
	return shuffler;
}

void CrossOver::geneCount(std::vector< std:: vector<int> > chromosomePopulation, std::vector<int> crossOverselector)
{
	int n = 10;
  
  std::vector<int> deletablecrossOverselector = crossOverselector;
  std::vector<int> descendingChromosomeSelector;
  while(!deletablecrossOverselector.empty()) {
    int crossoverChromosomeTracker= 0;
    for(int i = 0; i < deletablecrossOverselector.size(); i++) {
      int fitnessValue = 0;
      int highestFitnessValue = 0;
      for(int j = 0; j < n; j++) {
        if(chromosomePopulation[deletablecrossOverselector[i]][j] == 1){
          fitnessValue++;
        }
      }
      if(highestFitnessValue < fitnessValue) {
        highestFitnessValue = fitnessValue;
        crossoverChromosomeTracker = deletablecrossOverselector.at(i);
      }
    }
   descendingChromosomeSelector.push_back(crossoverChromosomeTracker);
   deletablecrossOverselector.erase(std::find(deletablecrossOverselector.begin(),deletablecrossOverselector.end(), crossoverChromosomeTracker));
  }
}

std::vector< std::vector<int> > CrossOver::crossOver (std::vector< std::vector<int> > population, std::vector<int> crossOverselector)
{
	int m = 20, n = 10;
	newPopulation.resize(m);
	for(int i =0; i < m; i++)
	{
		newPopulation[i].resize(n);
	}

	std::vector<int> parentSelection;
	std::vector<std::vector<int> > sibling;
	int counter = 0;
  
	while (crossOverselector.size() != 0) {
    
		parentSelection.push_back(crossOverselector.front());
		crossOverselector.erase(crossOverselector.begin());
		parentSelection.push_back(crossOverselector.front());
		crossOverselector.erase(crossOverselector.begin());
		sibling = CrossOver::crossoverMask(population,parentSelection);
		counter = CrossOver::addToPopulationFromShuffler(counter, sibling);
		parentSelection.erase(parentSelection.begin());
		parentSelection.erase(parentSelection.begin());

	}
	
	CrossOver::addToPopulationFromRemaining(population, counter);
  parentSelection.clear();
  sibling.clear();
	return newPopulation;
}

std::vector< std::vector<int> > CrossOver::crossoverMask(std::vector< std::vector<int> > population, std::vector<int> parentSelection)
{
	
  std::vector< std::vector<int> > sibling;
	sibling.resize(2);
	
	for(int i =0; i <sibling.size();i++)
	{
		sibling[i].resize(10);
	}
	
	for (int i = 0; i < 5; i++)
	{
	  sibling[0][i] = population[parentSelection[0]][i];
	  sibling[1][i] = population[parentSelection[1]][i];
	}
	
	for(int i = 5; i < 10; i++)
	{
		sibling[0][i] = population[parentSelection[1]][i];
		sibling[1][i] = population[parentSelection[0]][i];
	}

	return sibling;
}

int CrossOver::addToPopulationFromShuffler(int counter, std::vector< std::vector<int> > sibling)
{
	for(int i = 0; i < 10; i++) {
		newPopulation[counter][i] = sibling[0][i]; 
	}
	counter++;
	for(int i = 0; i < 10; i++) {
		newPopulation[counter][i] = sibling[1][i]; 
	}
	
	counter++;
	return counter;
}

void CrossOver::addToPopulationFromRemaining(std::vector< std::vector<int> > population, int counter)
{
	for (int i = 0; i < remainingPopulation.size(); i++)
	{
		for(int j = 0; j < 10; j++)
		{
		  newPopulation[counter][j] = population[remainingPopulation[i]][j];
		}
		counter++;
	}
}

void CrossOver::clearPopulation() {
  newPopulation.clear();
  remainingPopulation.clear();
  shuffler.clear();
}










